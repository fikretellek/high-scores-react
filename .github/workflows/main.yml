name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14' # Specify the node version you need

    - name: Install dependencies
      run: npm install

    - name: Build project
      run: npm run build

    - name: Zip the build artifacts
      run: zip -r build.zip build/

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws s3 cp build.zip s3://${{ secrets.S3_BUCKET }}/build.zip

    - name: Connect to EC2 and deploy
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        aws ec2-instance-connect send-ssh-public-key \
          --instance-id $EC2_INSTANCE_ID \
          --availability-zone $(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query "Reservations[0].Instances[0].Placement.AvailabilityZone" --output text) \
          --instance-os-user $EC2_USER \
          --ssh-public-key file://~/.ssh/id_rsa.pub

        ssh -o "StrictHostKeyChecking=no" $EC2_USER@$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << 'EOF'
          sudo yum update -y
          sudo yum install -y unzip
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/build.zip build.zip
          unzip -o build.zip -d /var/www/html/
          sudo systemctl restart httpd
EOF
